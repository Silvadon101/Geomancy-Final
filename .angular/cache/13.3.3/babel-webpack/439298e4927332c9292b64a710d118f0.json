{"ast":null,"code":"import { Point, PolygonLineGroup } from '../Modules/LineGroupCollisionManager';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../autoplay.directive\";\nconst _c0 = [\"canvas1\"];\nconst _c1 = [\"traceCanvas1\"];\nexport let HeaderComponent = /*#__PURE__*/(() => {\n  class HeaderComponent {\n    constructor() {\n      this.logo = new PolygonLineGroup(new Point(150, 150), 100, 3, 0);\n    }\n\n    ngAfterViewInit() {\n      this.canvas1.nativeElement.style.width = \"300px\";\n      this.canvas1.nativeElement.style.height = \"300px\";\n      this.canvas1.nativeElement.style.zIndex = \"0\";\n      this.context1 = this.canvas1.nativeElement.getContext(\"2d\");\n      this.context1.canvas.width = 300;\n      this.context1.canvas.height = 300;\n      this.context1.lineWidth = 2;\n      this.traceCanvas1.nativeElement.style.color = \"rgb(65,205,255)\";\n      this.traceCanvas1.nativeElement.style.transition = `all ${15 / 30}s linear`;\n      let context1_buffer = [];\n      let tracer = context1_buffer.length * 120;\n      let traceSwitch = true;\n      setInterval(() => {\n        let buffer = [];\n\n        for (let i = 0; i < this.logo.lineArray.length; i++) {\n          buffer.push(this.logo.lineArray[i]);\n        }\n\n        if (context1_buffer.length > 12) {\n          context1_buffer.shift();\n        }\n\n        context1_buffer.push(buffer);\n        this.context1.clearRect(0, 0, this.context1.canvas.width, this.context1.canvas.height);\n        context1_buffer.forEach((value, index) => {\n          this.context1.strokeStyle = `rgba( 65, ${25 + index * 10}, ${108 + index * 9}, ${1 - index / (context1_buffer.length - 1) / 2})`;\n          tracer++;\n          tracer %= context1_buffer.length * 180;\n\n          if (tracer % (context1_buffer.length * 15 + 1) == 0) {\n            if (traceSwitch) {\n              this.traceCanvas1.nativeElement.style.color = `rgb( 65, ${205 - index * 15}, ${255 - index * 9})`;\n              this.traceCanvas1.nativeElement.style.textShadow = `0 0 5px rgb( 65, ${25 + index * 15}, ${108 + index * 9})`;\n            } else {\n              this.traceCanvas1.nativeElement.style.color = `rgb( 65, ${25 + index * 15}, ${108 + index * 9})`;\n              this.traceCanvas1.nativeElement.style.textShadow = `0 0 5px rgb( 65, ${205 - index * 15}, ${255 - index * 9})`;\n            }\n\n            if (tracer == 0 || tracer == context1_buffer.length * 180 + 1) {\n              traceSwitch = !traceSwitch;\n            }\n          }\n\n          this.context1.beginPath();\n          value.forEach(line => {\n            this.context1.moveTo(line.x, line.y);\n            this.context1.lineTo(line.x2, line.y2);\n          });\n          this.context1.stroke();\n        });\n        this.logo = new PolygonLineGroup(new Point(150, 150), 100, 3, this.logo.initAngle + Math.PI / 45);\n      }, 1000 / 30);\n    }\n\n  }\n\n  HeaderComponent.ɵfac = function HeaderComponent_Factory(t) {\n    return new (t || HeaderComponent)();\n  };\n\n  HeaderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HeaderComponent,\n    selectors: [[\"app-header\"]],\n    viewQuery: function HeaderComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas1 = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.traceCanvas1 = _t.first);\n      }\n    },\n    decls: 21,\n    vars: 0,\n    consts: [[\"auto\", \"\", \"loop\", \"\", \"src\", \"assets/galaxy.mp4\", \"type\", \"video/mp4\", 1, \"bkgvid\"], [\"canvas1\", \"\"], [1, \"title\"], [\"traceCanvas1\", \"\"], [1, \"subtitle\"], [1, \"author\"], [1, \"highlight\"]],\n    template: function HeaderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"header\");\n        i0.ɵɵelement(1, \"video\", 0)(2, \"canvas\", null, 1);\n        i0.ɵɵelementStart(4, \"span\", 2);\n        i0.ɵɵtext(5, \"Geo\");\n        i0.ɵɵelementStart(6, \"span\", null, 3);\n        i0.ɵɵtext(8, \"m\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(9, \"ancy\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"span\", 4);\n        i0.ɵɵtext(11, \"Geometry management module.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"span\", 5);\n        i0.ɵɵtext(13, \"Project by Simon D. Maxwell\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"span\", 6)(15, \"span\");\n        i0.ɵɵtext(16, \"Build\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"span\");\n        i0.ɵɵtext(18, \"Trace\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"span\");\n        i0.ɵɵtext(20, \"Simulate\");\n        i0.ɵɵelementEnd()()();\n      }\n    },\n    directives: [i1.AutoplayDirective],\n    styles: [\"header[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;position:relative;height:80vh;width:100%;padding-bottom:20vh;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Open Sans,Helvetica Neue,sans-serif;overflow:hidden;background:black}header[_ngcontent-%COMP%]   .bkgvid[_ngcontent-%COMP%]{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);width:100%;height:100%;object-fit:cover;object-position:center;z-index:0;pointer-events:none}header[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{position:absolute;top:Calc(40% - 10px);left:50%;transform:translate(-50%,-50%);font-size:96px;font-family:Gill Sans,Gill Sans MT,Calibri,Trebuchet MS,sans-serif;color:#fff}header[_ngcontent-%COMP%]   .subtitle[_ngcontent-%COMP%]{position:absolute;width:-moz-fit-content;width:fit-content;top:calc(40% + 65px);left:50%;text-align:center;transform:translate(-50%,-50%);font-size:36px;color:#3ff;text-shadow:0 0 5px black}header[_ngcontent-%COMP%]   .author[_ngcontent-%COMP%]{position:absolute;width:-moz-fit-content;width:fit-content;top:10px;left:10px;font-size:14px;color:#fff}header[_ngcontent-%COMP%]   .highlight[_ngcontent-%COMP%]{display:flex;justify-content:space-between;max-width:80%;width:500px;position:absolute;top:75%;left:50%;text-align:center;transform:translate(-50%,-50%);font-size:24px;color:#fff;text-shadow:0 0 5px black}header[_ngcontent-%COMP%]   .highlight[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{transition:font-size .25s linear}header[_ngcontent-%COMP%]   .highlight[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]:hover{font-size:130%}\"]\n  });\n  return HeaderComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}